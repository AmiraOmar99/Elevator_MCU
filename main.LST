C51 COMPILER V8.08   MAIN                                                                  05/17/2021 01:04:57 PAGE 1   


C51 COMPILER V8.08, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\SiLabs\MCU\IDEfiles\C51\BIN\C51.exe main.c DB OE BR

line level    source

   1          #include"C8051F020.h"
   2          int floor = 0;
   3          
   4          unsigned int UP_req[5]= {0,0,0,0,0};
   5          unsigned int level_req[5]= {0,0,0,0,0};
   6          unsigned int down_req[5]= {0,0,0,0,0};
   7          int i=0;
   8          
   9          
  10          void timer0_init(void)
  11          {
  12   1          CKCON &= 0xF0; //T0M = 0; Timer 0 uses SysClock/12 
  13   1          TMOD = (TMOD & 0xF0) | 0x01;  /* Set T/C0 Mode mode1*/       
  14   1          ET0 = 1;                      /* Enable Timer 0 Interrupts*/
  15   1      }
  16          
  17          
  18          
  19          
  20          // inside_buutons 
  21          sbit open = P0^7;
  22          sbit led = P1^7;
  23          sbit floor0 = P2^0;
  24          sbit floor1 = P2^1;
  25          sbit floor2 = P2^2;
  26          sbit floor3 = P2^3;
  27          sbit floor4 = P2^4;
  28          
  29          
  30          sbit motor1 = P3^4 ; 
  31          sbit motor2 = P3^5 ; 
  32          
  33          sbit floor1Down = P2^5;
  34          sbit floor2Down = P2^6;
  35          sbit floor3Down = P2^7;
  36          
  37          
  38          void motor_delay()
  39          {
  40   1          int i = 0;
  41   1          int j = 0;
  42   1          for (i=0;i<1000;++i){
  43   2              for(j=0;j<100;++j){
  44   3              }
  45   2          }
  46   1      }
  47          
  48          
  49          
  50          void door_delay()
  51          {
  52   1          int i = 0;
  53   1          int j = 0;
  54   1          for (i=0;i<1000;++i){
  55   2              for(j=0;j<500;++j){
C51 COMPILER V8.08   MAIN                                                                  05/17/2021 01:04:57 PAGE 2   

  56   3              }
  57   2          }
  58   1      }
  59          
  60          
  61          
  62          void motor_delay1()
  63          {
  64   1          int i = 0;
  65   1          int j = 0;
  66   1          for (i=0;i<1000;++i){
  67   2              for(j=0;j<90;++j){
  68   3              }
  69   2          }
  70   1      }
  71          void ascend()
  72          {
  73   1          motor1 = 1 ;
  74   1          motor2 = 0;
  75   1          motor_delay();
  76   1          motor1 = 0 ;
  77   1          motor2=1;
  78   1          motor_delay1();
  79   1          motor2=0;
  80   1      }
  81          
  82          void descend()
  83          {
  84   1          motor1 = 0 ; 
  85   1          motor2 = 1 ;
  86   1          motor_delay();
  87   1          motor2 = 0 ;
  88   1          motor1=1 ;
  89   1          motor_delay1();
  90   1          motor1=0;
  91   1      }
  92          
  93          
  94          void requests(void){
  95   1          //inside _buttons
  96   1          if(!(floor0)){
  97   2              level_req[0]=1;
  98   2             
  99   2          }
 100   1           if(!(floor1)){
 101   2              level_req[1]=1;
 102   2              
 103   2          }
 104   1           if(!(floor2)){
 105   2              level_req[2]=1;
 106   2             
 107   2          }
 108   1           if(!(floor3)){
 109   2              level_req[3]=1;
 110   2          }
 111   1          if(!(floor4)){
 112   2              level_req[4]=1; 
 113   2          }
 114   1      
 115   1          if(!(floor1Down)){
 116   2              down_req[1]=1;
 117   2              
C51 COMPILER V8.08   MAIN                                                                  05/17/2021 01:04:57 PAGE 3   

 118   2          }
 119   1           if(!(floor2Down)){
 120   2              down_req[2]=1;
 121   2             
 122   2          }
 123   1           if(!(floor3Down)){
 124   2              down_req[3]=1;
 125   2          }
 126   1          
 127   1          if(!(P3&0x40)){  //Down_req of zero floor 
 128   2              down_req[0]=1;
 129   2          }
 130   1      
 131   1          if(!(P3&0x01))  {  //001 "0"
 132   2              UP_req[1]=1;
 133   2             
 134   2          } 
 135   1          if(!(P3&0x02))  {  //010 "1"
 136   2              UP_req[2]=1;
 137   2              
 138   2          } 
 139   1          if(!(P3&0x04))  {  //100 "2"
 140   2              UP_req[3]=1;
 141   2              
 142   2          } 
 143   1          if(!(P3&0x08))  {  //1000 "3" // Up_req for 4th floor 
 144   2              UP_req[4]=1;
 145   2             
 146   2          } 
 147   1          
 148   1      }
 149          
 150          
 151          //executed every 65536 count
 152          void timer0_ISR() interrupt 1 {
 153   1          requests();
 154   1      }
 155          
 156          
 157          
 158          void seg_dispaly(floor){
 159   1          if(floor==0)        P1 = 0x3F;
 160   1          else if(floor==1)   P1 = 0x06;
 161   1          else if(floor==2)   P1 = 0x5B;
 162   1          else if(floor==3)   P1 = 0x4F;
 163   1          else if(floor==4)   P1 = 0x66;
 164   1      }
 165          
 166          
 167          void main(void){
 168   1          
 169   1       // diable the watch dog
 170   1          WDTCN = 0x0DE;
 171   1          WDTCN = 0x0AD;
 172   1      
 173   1          OSCICN = 0x014; // 2MH clock
 174   1      
 175   1          // config cross bar
 176   1          XBR0 = 0x00;
 177   1          XBR1 = 0x00;
 178   1          XBR2 = 0x040; // Cross bar enabled , weak Pull-up enabled
 179   1      
C51 COMPILER V8.08   MAIN                                                                  05/17/2021 01:04:57 PAGE 4   

 180   1          P0MDOUT |= 0x08; 
 181   1          P1MDOUT |= 0x7F;
 182   1          P2MDOUT |= 0x00;
 183   1      
 184   1          timer0_init();
 185   1          EA=1;
 186   1          TR0 = 1;    /* Start Timer 0 Running */
 187   1      
 188   1          requests();
 189   1      
 190   1          while(1)
 191   1          {
 192   2              seg_dispaly(floor);        
 193   2              i=0;
 194   2              for(i=0;i<5;i++){
 195   3                  if((  level_req[i] || UP_req[i] || down_req[i])&& i>floor  ) 
 196   3                  {
 197   4                      while(floor != i )
 198   4                      {
 199   5                          ascend();
 200   5                          floor++;
 201   5                          seg_dispaly(floor);
 202   5                          if(  level_req[floor] || UP_req[floor]|| down_req[floor] )
 203   5                          { 
 204   6                              level_req[floor]=0;
 205   6                              UP_req[floor]=0;
 206   6                              down_req[floor]=0; 
 207   6                                                      led = 1;
 208   6                                                      door_delay();
 209   6                                                      led =0;
 210   6                          }
 211   5                      }
 212   4                                      
 213   4                  }
 214   3      
 215   3              }
 216   2              i=4;
 217   2              for( i=4;i>=0;i--){
 218   3                  if(( level_req[i] || down_req[i] || UP_req[i]) &&  i< floor ){
 219   4                      while(floor != i )
 220   4                      {
 221   5                          descend();
 222   5                          floor--;
 223   5                          seg_dispaly(floor);
 224   5                          if( level_req[floor]  || down_req[floor]||UP_req[floor])
 225   5                          { 
 226   6      
 227   6                             level_req[floor]=0;
 228   6                             down_req[floor]=0; 
 229   6                             UP_req[floor]=0;
 230   6                          }
 231   5                      }
 232   4              }
 233   3              }
 234   2          }
 235   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    760    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
C51 COMPILER V8.08   MAIN                                                                  05/17/2021 01:04:57 PAGE 5   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =     34    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
